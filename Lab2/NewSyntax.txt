Specification (file Lexic.txt)
Alphabet:
	a. Upper (A-Z) and lower case letters (a-z) of the English alphabet
	b. Underline character '_';
	c. Decimal digits (0-9);
Lexic:
	a.Special symbols, representing:
		- operators + - * / := < > <= != = >= %
		- separators ( ) [ ] { } : ; space
		- reserved words:
            array
            char
            const
            do
            else
            if
            int
            of
            program
            read
            then
            var
            while
            write
    b.identifiers
        - a sequence of letters and digits, such that the first character is a letter; the rule is:
            identifier ::= letter | letter{letter}{digit}
            letter ::= "A" | "B" | ... | "Z" | "a" | "b" | ... | "z"
            digit ::= "0" | non_zero_digit
            non_zero_digit ::= "1" |...| "9"
    c.constants
        1.integer - rule:
            integer ::= unsigned | "+"unsigned | "-"unsigned | "0"
            unsigned ::= non_zero_digit{digit_seq} | non_zero_digit
            digit_seq ::= digit{digit_seq} | digit
        2.character
            character:='letter'|'digit'|specialChar
            specialChar:= '!' | '@' | '#' | '&' | '*' | '(' | ')' | '-' | '_' | '=' | '+' | ',' | '.' | '?' | '/' | ';' | ':' | ''' | '"' | '\'
        3.string
            constchar:="string"
            string:=char{string}
            char:=letter|digit|specialChar
            specialChar:= "!" | "@" | "#" | "&" | "*" | "(" | ")" | "-" | "_" | "=" | "+" | "," | "." | "?" | "/" | ";" | ":" | "'" | """ | "\"
-------------------------------------------------------------------
Syntactical rules: (file Syntax.in)
program ::= "VAR" decllist ";" cmpdstmt
decllist ::= declaration | declaration ";" decllist
declaration ::= identlist ": " type
identlist ::= IDENTIFIER | IDENTIFIER{","IDENTIFIER}
type1 ::= "BOOLEAN" | "CHAR" | "INTEGER" | "REAL"
arraydecl ::= "ARRAY" "[" nr "]" "OF" type1
type ::= type1|arraydecl
cmpdstmt ::= "BEGIN" stmtlist ";" "END"
stmtlist ::= stmt | stmt ";" stmtlist
stmt ::= simplstmt | structstmt
simplstmt ::= assignstmt | iostmt
assignstmt ::= IDENTIFIER ":=" expression
expression ::= expression "+" term | expression "-" term | term
term ::= term "*" factor | term "/" factor | term "%" factor | factor
factor ::= "(" expression ")" | IDENTIFIER | const
iostmt ::= "READ" "(" identlist ")" | "WRITE" "(" identlist ")" | "WRITE" "(" const ")"
structstmt ::= cmpdstmt | ifstmt | whilestmt
ifstmt ::= "IF" condition "THEN" stmt ["ELSE" stmt]
whilestmt ::= "WHILE" condition "DO" stmt
condition ::= expression RELATION expression
RELATION ::= "<" | "<=" | "=" | "<>" | ">=" | ">"